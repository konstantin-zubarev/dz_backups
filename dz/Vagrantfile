# -*- mode: ruby -*-
# vim: set ft=ruby :

BRIDGE_NET='192.168.11.'
DOMAIN='mydomen.local'

home = ENV['HOME']

servers = [
  {
    :box_name => "centos/7",
    :hostname => 'backup-server.' + DOMAIN,
    :ip_addr => BRIDGE_NET + '101',
    :memory => '1024',
    :cpus => '1',
    :hdd_path => home + '/VirtualBox VMs/disk/storage1.vdi',
    :hdd_size => '5120'
  },
  {
    :box_name => "centos/7",
    :hostname => 'client.' + DOMAIN,
    :ip_addr => BRIDGE_NET + '102',
    :memory => '1024',
    :cpus => '1'
  }
]

Vagrant.configure("2") do |config|
  config.vm.synced_folder "./files", "/vagrant"
  servers.each do |machine|
    config.vm.define machine[:hostname] do |box|
      box.vm.box = machine[:box_name]
      box.vm.hostname = machine[:hostname]
      box.vm.network "private_network", ip: machine[:ip_addr]
      box.vm.provider :virtualbox do |vb|
        vb.memory = machine[:memory]
        vb.cpus = machine[:cpus]
        vb.name = machine[:hostname]
        filename='./.vagrant/machines/server/virtualbox/sata24.vdi'
        if (!machine[:hdd_path].nil?)
          unless File.exist?(machine[:hdd_path])
            vb.customize ['createhd', '--filename', machine[:hdd_path], '--variant', 'Fixed', '--size', machine[:hdd_size]]
            needsController =  true
          end
          if needsController == true
            vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
            vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', machine[:hdd_path]]
          end
        end
      end
      box.vm.provision "shell", inline: <<-SHELL
        mkdir -p ~root/.ssh; cp ~vagrant/.ssh/auth* ~root/.ssh
        sed -i '65s/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
        systemctl restart sshd
      SHELL
      box.vm.provision "shell", path: "./scripts/bootstrap.sh"
    end
#    config.vm.provision "ansible" do |ansible|
#      ansible.verbose = "vvv"
#      ansible.playbook = "borg.yml"
#    end
  end
end
